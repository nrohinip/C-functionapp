name: azure-deploy

on:
  push:
    branches: [ master ]

env:
  DOTNET_VERSION: '3.1.x'
  AZURE_RESOURCE_GROUP_NAME: 'secrets'
  AZURE_FUNCTIONAPP_NAME: 'greetingservice'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '${{ github.workspace }}/src/GreetingDemo.Function'
  BUILD_OUTPUT_PATH: '${{ github.workspace }}/build-artifacts'
  BUILD_PACKAGE_NAME: 'az-func.zip'

defaults:
  run:
    shell: bash

jobs:
    deploy-az-infrastructure:
      runs-on: ubuntu-latest
      steps:

       # Authentication
       # Set up the following secrets in your repository: AZURE_CREDENTIALS
       # For details see https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure
       - name: 'Login to Azure'
         uses: azure/login@v1
         with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}

       # Makes source code is accessible via $github.workspace
       - name: 'Checking out source code ...'
         uses: actions/checkout@v2
 
       # Deploy Azure function app
       # Note: Using Azure CLI for deployment as it provides more verbose error messages
       - name: 'Creating Azure Function App'
         uses: azure/CLI@v1
         with:
           inlineScript: |
             az deployment group create \
             --name az-func-workflow-deploy \
             --resource-group ${{ env.AZURE_RESOURCE_GROUP_NAME }} \
             --template-file $GITHUB_WORKSPACE/src/GreetingDemo.AzArmTemplates/GreetingFunction/template.json \
             --mode incremental \
             --parameters $GITHUB_WORKSPACE/src/GreetingDemo.AzArmTemplates/GreetingFunction/parameters.json \
 
    ############################################################################

    build-az-function:
      needs: [deploy-az-infrastructure]
      runs-on: ubuntu-latest
      steps:
      
       # Makes source code accessible via $github.workspace
       - name: 'Checking out source code ...'
         uses: actions/checkout@v2

       - name: 'Setup .NET Environment'
         uses: actions/setup-dotnet@v1
         with:
           dotnet-version: ${{ env.DOTNET_VERSION }}
       
       - name: 'Build and package code'
         shell: bash
         run: |
           publishfolder="${{ github.workspace }}/output"
           mkdir $publishfolder
           cd $publishfolder
           dotnet publish ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} --configuration Release --output .
           mkdir ${{ env.BUILD_OUTPUT_PATH }}
           zip -r ${{ env.BUILD_OUTPUT_PATH }}/${{ env.BUILD_PACKAGE_NAME }} .
       
       # Upload the code artifact, this will be used later
       - name: 'Package Azure Function release build'
         uses: actions/upload-artifact@v2
         with:
           name: build_artifacts
           path: ${{ env.BUILD_OUTPUT_PATH }}
           if-no-files-found: error

    ############################################################################

    deploy-az-function:
      needs: [build-az-function]
      runs-on: ubuntu-latest
      steps:
      
       # Makes source code accessible via $github.workspace
       - name: 'Checking out source code ...'
         uses: actions/checkout@v2
       
       # Authentication
       # Set up the following secrets in your repository: AZURE_CREDENTIALS
       # For details see https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure
       - name: 'Login to Azure'
         uses: azure/login@v1
         with:
           creds: ${{ secrets.AZURE_CREDENTIALS }}
           enable-AzPSSession: true
       
       - name: 'Fetching Azure Functions Publishing Profile'
         id: fncapp
         uses: azure/powershell@v1
         with:
           inlineScript: |
               $profile = ""
               $profile = Get-AzWebAppPublishingProfile -ResourceGroupName $env:AZURE_RESOURCE_GROUP_NAME -Name $env:AZURE_FUNCTIONAPP_NAME
               $profile = $profile.Replace("`r", "").Replace("`n", "")
               Write-Output "::set-output name=pubprofile::$profile"
               Remove-Variable profile
           azPSVersion: "latest"

       - name: 'Create output directory'
         shell: bash
         run: |
           mkdir ${{ env.BUILD_OUTPUT_PATH }}

       # Fetch published code
       - name: 'Download Azure function release build'
         uses: actions/download-artifact@v2
         with:
           name: build_artifacts
           path: ${{ env.BUILD_OUTPUT_PATH }}

       # Deploy Azure functions code
       - name: 'Run Azure Functions Action'
         uses: azure/functions-action@v1
         with:
           app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
           package: ${{ env.BUILD_OUTPUT_PATH }}/${{ env.BUILD_PACKAGE_NAME }}
           publish-profile: ${{ steps.fncapp.outputs.pubprofile }}
